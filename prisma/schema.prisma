generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  name                  String
  firstName             String                 @default("") @map("firstName")
  lastName              String                 @default("") @map("lastName")
  role                  UserRole               @default(VOLUNTEER_RESEARCH_ASSISTANT)
  avatar                String?
  avatarUrl             String?                @map("avatarUrl")
  avatarImage           Bytes?                 @map("avatarImage")
  initials              String
  capacity              Int                    @default(40)
  expertise             String[]
  isActive              Boolean                @default(true) @map("isActive")
  metadata              Json?
  createdAt             DateTime               @default(now()) @map("createdAt")
  updatedAt             DateTime               @updatedAt @map("updatedAt")
  actionItems           ActionItem[]
  uploadedAttachments   Attachment[]
  automationRules       AutomationRule[]
  comments              Comment[]
  createdDeadlines      Deadline[]
  deadlineAssignees     DeadlineAssignee[]
  sentEmails            EmailLog[]
  enhancedNotifications EnhancedNotification[] @relation("UserNotifications")
  uploadedFiles         FileAttachment[]       @relation("FileUploader")
  createdIdeas          Idea[]
  ideaComments          IdeaComment[]
  ideaVotes             IdeaVote[]
  labs                  LabMember[]
  mentions              Mention[]
  notifications         Notification[]
  createdProjects       Project[]              @relation("ProjectCreator")
  projectComments       ProjectComment[]
  projectMembers        ProjectMember[]
  standupParticipants   StandupParticipant[]
  statusChanges         StatusHistory[]        @relation("StatusChanger")
  completedTasks        Task[]                 @relation("TaskCompleter")
  createdTasks          Task[]                 @relation("TaskCreator")
  assignedTasks         TaskAssignee[]
  taskComments          TaskComment[]
  timeEntries           TimeEntry[]            @relation("TimeTracker")
  presence              UserPresence[]
  viewConfigurations    ViewConfiguration[]
}

model Lab {
  id                 String              @id @default(cuid())
  name               String
  shortName          String              @unique @map("shortName")
  description        String?
  logo               String?
  icon               String?
  color              String?
  isActive           Boolean             @default(true) @map("isActive")
  createdAt          DateTime            @default(now()) @map("createdAt")
  updatedAt          DateTime            @updatedAt @map("updatedAt")
  automationRules    AutomationRule[]
  buckets            Bucket[]
  customFields       CustomField[]
  deadlines          Deadline[]
  ideas              Idea[]
  members            LabMember[]
  projects           Project[]
  standups           Standup[]
  viewConfigurations ViewConfiguration[]
}

/// Associates users with labs - represents lab membership and permissions
/// Each record links a user to a specific lab with their role and permissions
model LabMember {
  id       String   @id @default(cuid())
  /// The user who is a member of the lab
  userId   String   @map("userId")
  /// The lab this membership is for
  labId    String   @map("labId")
  /// Whether user has admin privileges in this lab (kept for compatibility)
  isAdmin  Boolean  @default(false) @map("isAdmin")
  /// Active = current member, Inactive = former member (soft delete)
  isActive Boolean  @default(true) @map("isActive")
  /// When the user joined this lab
  joinedAt DateTime @default(now()) @map("joinedAt")
  lab      Lab      @relation(fields: [labId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, labId])
}

model Project {
  id                    String              @id @default(cuid())
  parentId              String?             @map("parentId")
  name                  String
  description           String?
  oraNumber             String?             @unique @map("oraNumber")
  status                ProjectStatus       @default(PLANNING)
  priority              Priority            @default(MEDIUM)
  projectType           String              @map("projectType")
  studyType             String?             @map("studyType")
  fundingSource         FundingSource?      @map("fundingSource")
  fundingDetails        String?             @map("fundingDetails")
  externalCollaborators String?             @map("externalCollaborators")
  startDate             DateTime?           @map("startDate")
  dueDate               DateTime?           @map("dueDate")
  completedDate         DateTime?           @map("completedDate")
  notes                 String?
  protocolLink          String?             @map("protocolLink")
  dataLink              String?             @map("dataLink")
  progress              Int                 @default(0)
  position              Int                 @default(0)
  isActive              Boolean             @default(true) @map("isActive")
  metadata              Json?
  createdAt             DateTime            @default(now()) @map("createdAt")
  updatedAt             DateTime            @updatedAt @map("updatedAt")
  labId                 String              @map("labId")
  bucketId              String              @map("bucketId")
  createdById           String              @map("createdById")
  deadlines             Deadline[]
  ideas                 Idea?
  relatedIdeas          IdeaStudyRelation[]
  bucket                Bucket              @relation(fields: [bucketId], references: [id])
  createdBy             User                @relation("ProjectCreator", fields: [createdById], references: [id])
  lab                   Lab                 @relation(fields: [labId], references: [id], onDelete: Cascade)
  parent                Project?            @relation("ProjectHierarchy", fields: [parentId], references: [id])
  children              Project[]           @relation("ProjectHierarchy")
  comments              ProjectComment[]
  members               ProjectMember[]
  tasks                 Task[]
  timeEntries           TimeEntry[]         @relation("ProjectTimeEntries")

  @@index([labId, status])
  @@index([oraNumber])
  @@index([bucketId])
  @@index([bucketId, position])
}

model ProjectMember {
  id         String     @id @default(cuid())
  projectId  String     @map("projectId")
  userId     String     @map("userId")
  role       MemberRole @default(CONTRIBUTOR)
  allocation Int        @default(20)
  isActive   Boolean    @default(true) @map("isActive")
  joinedAt   DateTime   @default(now()) @map("joinedAt")
  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([userId, role])
}

model Bucket {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String    @default("#8B5CF6")
  icon        String    @default("folder")
  position    Int       @default(0)
  isActive    Boolean   @default(true) @map("isActive")
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")
  labId       String    @map("labId")
  lab         Lab       @relation(fields: [labId], references: [id], onDelete: Cascade)
  projects    Project[]

  @@unique([labId, name])
  @@index([labId, position])
}

model Task {
  id             String           @id @default(cuid())
  parentTaskId   String?          @map("parentTaskId")
  title          String
  description    String?
  status         TaskStatus       @default(TODO)
  priority       Priority         @default(MEDIUM)
  estimatedHours Float?           @map("estimatedHours")
  actualHours    Float?           @map("actualHours")
  dueDate        DateTime?        @map("dueDate")
  startDate      DateTime?        @map("startDate")
  completedAt    DateTime?        @map("completedAt")
  position       Int              @default(0)
  tags           String[]         @default([])
  isActive       Boolean          @default(true) @map("isActive")
  metadata       Json?
  createdAt      DateTime         @default(now()) @map("createdAt")
  updatedAt      DateTime         @updatedAt @map("updatedAt")
  projectId      String           @map("projectId")
  createdById    String           @map("createdById")
  completedById  String?          @map("completedById")
  completedBy    User?            @relation("TaskCompleter", fields: [completedById], references: [id])
  createdBy      User             @relation("TaskCreator", fields: [createdById], references: [id])
  parent         Task?            @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  subtasks       Task[]           @relation("TaskHierarchy")
  project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignees      TaskAssignee[]
  comments       TaskComment[]
  dependencies   TaskDependency[] @relation("DependentTask")
  dependents     TaskDependency[] @relation("DependsOnTask")
  timeEntries    TimeEntry[]

  @@index([projectId, status])
  @@index([projectId, position])
  @@index([parentTaskId, position])
  @@index([dueDate])
}

model TaskAssignee {
  id         String   @id @default(cuid())
  taskId     String   @map("taskId")
  userId     String   @map("userId")
  isActive   Boolean  @default(true) @map("isActive")
  assignedAt DateTime @default(now()) @map("assignedAt")
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
}

model TaskDependency {
  id              String @id @default(cuid())
  dependentTaskId String @map("dependentTaskId")
  dependsOnTaskId String @map("dependsOnTaskId")
  dependentTask   Task   @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  dependsOnTask   Task   @relation("DependsOnTask", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)

  @@unique([dependentTaskId, dependsOnTaskId])
  @@index([dependsOnTaskId])
}

model Idea {
  id                     String              @id @default(cuid())
  title                  String
  description            String
  category               IdeaCategory        @default(RESEARCH_QUESTION)
  priority               Priority            @default(MEDIUM)
  status                 IdeaStatus          @default(ACTIVE)
  stage                  IdeaStage           @default(CONCEPT)
  feasibilityScore       Int?                @map("feasibilityScore")
  impactScore            Int?                @map("impactScore")
  resourceRequirement    ResourceLevel       @default(MEDIUM)
  estimatedDuration      String?             @map("estimatedDuration")
  requiredSkills         String[]            @default([])
  potentialCollaborators String[]            @default([])
  tags                   String[]            @default([])
  attachments            Json[]              @default([])
  voteScore              Int                 @default(0) @map("voteScore")
  isActive               Boolean             @default(true) @map("isActive")
  createdAt              DateTime            @default(now()) @map("createdAt")
  updatedAt              DateTime            @updatedAt @map("updatedAt")
  labId                  String              @map("labId")
  createdById            String              @map("createdById")
  convertedToProjectId   String?             @unique @map("convertedToProjectId")
  convertedToProject     Project?            @relation(fields: [convertedToProjectId], references: [id])
  createdBy              User                @relation(fields: [createdById], references: [id])
  lab                    Lab                 @relation(fields: [labId], references: [id], onDelete: Cascade)
  comments               IdeaComment[]
  relatedStudies         IdeaStudyRelation[]
  votes                  IdeaVote[]

  @@index([labId, status])
  @@index([voteScore])
  @@index([createdAt])
}

model IdeaVote {
  id       String   @id @default(cuid())
  ideaId   String   @map("ideaId")
  userId   String   @map("userId")
  voteType VoteType @map("voteType")
  votedAt  DateTime @default(now()) @map("votedAt")
  idea     Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([ideaId, userId])
  @@index([ideaId])
}

model IdeaComment {
  id        String   @id @default(cuid())
  ideaId    String   @map("ideaId")
  userId    String   @map("userId")
  content   String
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  idea      Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([ideaId, createdAt])
}

model IdeaStudyRelation {
  id        String  @id @default(cuid())
  ideaId    String  @map("ideaId")
  projectId String  @map("projectId")
  idea      Idea    @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([ideaId, projectId])
}

model Standup {
  id                String               @id @default(cuid())
  date              DateTime
  audioUrl          String?              @map("audioUrl")
  isActive          Boolean              @default(true) @map("isActive")
  createdAt         DateTime             @default(now()) @map("createdAt")
  updatedAt         DateTime             @updatedAt @map("updatedAt")
  labId             String               @map("labId")
  actionItems       ActionItem[]
  blockers          Blocker[]
  decisions         Decision[]
  emailLogs         EmailLog[]
  lab               Lab                  @relation(fields: [labId], references: [id], onDelete: Cascade)
  participants      StandupParticipant[]
  transcriptArchive TranscriptArchive?
}

model StandupParticipant {
  id        String  @id @default(cuid())
  standupId String  @map("standupId")
  userId    String  @map("userId")
  standup   Standup @relation(fields: [standupId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([standupId, userId])
}

model ActionItem {
  id          String    @id @default(cuid())
  description String
  completed   Boolean   @default(false)
  dueDate     DateTime? @map("dueDate")
  isActive    Boolean   @default(true) @map("isActive")
  createdAt   DateTime  @default(now()) @map("createdAt")
  standupId   String    @map("standupId")
  assigneeId  String?   @map("assigneeId")
  assignee    User?     @relation(fields: [assigneeId], references: [id])
  standup     Standup   @relation(fields: [standupId], references: [id], onDelete: Cascade)
}

model Blocker {
  id          String  @id @default(cuid())
  description String
  resolved    Boolean @default(false)
  isActive    Boolean @default(true) @map("isActive")
  standupId   String  @map("standupId")
  standup     Standup @relation(fields: [standupId], references: [id], onDelete: Cascade)
}

model Decision {
  id          String  @id @default(cuid())
  description String
  isActive    Boolean @default(true) @map("isActive")
  standupId   String  @map("standupId")
  standup     Standup @relation(fields: [standupId], references: [id], onDelete: Cascade)
}

model TranscriptArchive {
  id         String   @id @default(cuid())
  standupId  String   @unique @map("standupId")
  transcript String
  audioUrl   String?  @map("audioUrl")
  wordCount  Int      @default(0)
  duration   Int?
  language   String   @default("en")
  expiresAt  DateTime
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updatedAt")
  standup    Standup  @relation(fields: [standupId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([standupId])
}

model EmailLog {
  id         String      @id @default(cuid())
  standupId  String      @map("standupId")
  recipients String[]
  subject    String
  sentAt     DateTime    @default(now()) @map("sentAt")
  sentById   String      @map("sentById")
  status     EmailStatus @default(SENT)
  metadata   Json?
  sentBy     User        @relation(fields: [sentById], references: [id])
  standup    Standup     @relation(fields: [standupId], references: [id], onDelete: Cascade)

  @@index([standupId])
  @@index([sentById])
}

model ActivityLog {
  id         String   @id @default(cuid())
  userId     String   @map("userId")
  labId      String?  @map("labId")
  entityType String   @map("entityType")
  entityId   String   @map("entityId")
  action     String
  metadata   Json?
  createdAt  DateTime @default(now()) @map("createdAt")

  @@index([userId, createdAt])
  @@index([entityType, entityId])
  @@index([labId, createdAt])
}

model Deadline {
  id               String             @id @default(cuid())
  title            String
  description      String?
  dueDate          DateTime           @map("dueDate")
  type             DeadlineType       @default(MILESTONE)
  priority         Priority           @default(MEDIUM)
  status           DeadlineStatus     @default(UPCOMING)
  isRecurring      Boolean            @default(false) @map("isRecurring")
  recurringPattern RecurringPattern?
  recurringEndDate DateTime?          @map("recurringEndDate")
  reminderDays     Int[]              @default([7, 3, 1]) @map("reminderDays")
  isActive         Boolean            @default(true) @map("isActive")
  createdAt        DateTime           @default(now()) @map("createdAt")
  updatedAt        DateTime           @updatedAt @map("updatedAt")
  projectId        String?            @map("projectId")
  labId            String?            @map("labId")
  createdById      String             @map("createdById")
  createdBy        User               @relation(fields: [createdById], references: [id])
  lab              Lab?               @relation(fields: [labId], references: [id])
  project          Project?           @relation(fields: [projectId], references: [id])
  assignees        DeadlineAssignee[]
  reminders        DeadlineReminder[]

  @@index([dueDate])
  @@index([labId, dueDate])
  @@index([projectId, dueDate])
  @@index([status, dueDate])
}

model DeadlineAssignee {
  id         String   @id @default(cuid())
  deadlineId String   @map("deadlineId")
  userId     String   @map("userId")
  assignedAt DateTime @default(now()) @map("assignedAt")
  deadline   Deadline @relation(fields: [deadlineId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([deadlineId, userId])
}

model DeadlineReminder {
  id            String         @id @default(cuid())
  deadlineId    String         @map("deadlineId")
  scheduledDate DateTime       @map("scheduledDate")
  daysBefore    Int            @map("daysBefore")
  status        ReminderStatus @default(PENDING)
  sentAt        DateTime?      @map("sentAt")
  deadline      Deadline       @relation(fields: [deadlineId], references: [id], onDelete: Cascade)

  @@index([scheduledDate, status])
  @@index([deadlineId])
}

model ProjectComment {
  id        String           @id @default(cuid())
  content   String
  projectId String           @map("projectId")
  userId    String           @map("userId")
  parentId  String?          @map("parentId")
  mentions  String[]         @default([])
  createdAt DateTime         @default(now()) @map("createdAt")
  updatedAt DateTime         @updatedAt @map("updatedAt")
  editedAt  DateTime?        @map("editedAt")
  parent    ProjectComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   ProjectComment[] @relation("CommentReplies")
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id])

  @@index([projectId, createdAt])
  @@index([userId])
}

model TaskComment {
  id        String        @id @default(cuid())
  content   String
  taskId    String        @map("taskId")
  userId    String        @map("userId")
  parentId  String?       @map("parentId")
  mentions  String[]      @default([])
  createdAt DateTime      @default(now()) @map("createdAt")
  updatedAt DateTime      @updatedAt @map("updatedAt")
  editedAt  DateTime?     @map("editedAt")
  parent    TaskComment?  @relation("TaskCommentReplies", fields: [parentId], references: [id])
  replies   TaskComment[] @relation("TaskCommentReplies")
  task      Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id])

  @@index([taskId, createdAt])
  @@index([userId])
}

model Attachment {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  thumbnailUrl String?
  entityType   String
  entityId     String
  uploadedById String   @map("uploadedById")
  uploadedAt   DateTime @default(now()) @map("uploadedAt")
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])

  @@index([entityType, entityId])
  @@index([uploadedById])
}

model CustomField {
  id           String             @id @default(cuid())
  name         String
  fieldType    CustomFieldType
  entityType   String
  labId        String             @map("labId")
  options      Json?
  defaultValue Json?
  isRequired   Boolean            @default(false)
  order        Int                @default(0)
  createdAt    DateTime           @default(now()) @map("createdAt")
  updatedAt    DateTime           @updatedAt @map("updatedAt")
  lab          Lab                @relation(fields: [labId], references: [id])
  values       CustomFieldValue[]

  @@unique([labId, entityType, name])
  @@index([entityType])
}

model CustomFieldValue {
  id        String      @id @default(cuid())
  fieldId   String      @map("fieldId")
  entityId  String
  value     Json
  createdAt DateTime    @default(now()) @map("createdAt")
  updatedAt DateTime    @updatedAt @map("updatedAt")
  field     CustomField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([fieldId, entityId])
  @@index([entityId])
}

model ViewConfiguration {
  id         String   @id @default(cuid())
  name       String
  viewType   ViewType
  entityType String
  userId     String   @map("userId")
  labId      String   @map("labId")
  config     Json
  isDefault  Boolean  @default(false)
  isShared   Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updatedAt")
  lab        Lab      @relation(fields: [labId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId, entityType])
  @@index([labId, entityType])
}

model AutomationRule {
  id            String   @id @default(cuid())
  name          String
  description   String?
  labId         String   @map("labId")
  triggerType   String
  triggerConfig Json
  actionType    String
  actionConfig  Json
  conditions    Json?
  isActive      Boolean  @default(true)
  createdById   String   @map("createdById")
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")
  createdBy     User     @relation(fields: [createdById], references: [id])
  lab           Lab      @relation(fields: [labId], references: [id])

  @@index([labId, isActive])
}

model Notification {
  id         String           @id @default(cuid())
  userId     String           @map("userId")
  type       NotificationType
  title      String
  message    String?
  entityType String?
  entityId   String?
  metadata   Json?
  isRead     Boolean          @default(false)
  readAt     DateTime?
  createdAt  DateTime         @default(now()) @map("createdAt")
  user       User             @relation(fields: [userId], references: [id])

  @@index([userId, isRead, createdAt])
  @@index([entityType, entityId])
}

model Comment {
  id         String          @id @default(cuid())
  content    String
  entityType CommentableType
  entityId   String          @map("entityId")
  parentId   String?         @map("parentId")
  authorId   String          @map("authorId")
  editedAt   DateTime?       @map("editedAt")
  isDeleted  Boolean         @default(false) @map("isDeleted")
  createdAt  DateTime        @default(now()) @map("createdAt")
  updatedAt  DateTime        @updatedAt @map("updatedAt")
  author     User            @relation(fields: [authorId], references: [id])
  parent     Comment?        @relation("CommentThread", fields: [parentId], references: [id])
  replies    Comment[]       @relation("CommentThread")
  mentions   Mention[]

  @@index([entityType, entityId, createdAt])
  @@index([authorId, createdAt])
  @@index([parentId])
}

model Mention {
  id        String    @id @default(cuid())
  commentId String    @map("commentId")
  userId    String    @map("userId")
  read      Boolean   @default(false)
  readAt    DateTime? @map("readAt")
  createdAt DateTime  @default(now()) @map("createdAt")
  comment   Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])

  @@unique([commentId, userId])
  @@index([userId, read])
}

model FileAttachment {
  id           String         @id @default(cuid())
  filename     String
  originalName String         @map("originalName")
  url          String
  fileSize     Int            @map("fileSize")
  mimeType     String         @map("mimeType")
  thumbnailUrl String?        @map("thumbnailUrl")
  entityType   AttachableType @map("entityType")
  entityId     String         @map("entityId")
  uploadedById String         @map("uploadedById")
  uploadedAt   DateTime       @default(now()) @map("uploadedAt")
  isDeleted    Boolean        @default(false) @map("isDeleted")
  uploadedBy   User           @relation("FileUploader", fields: [uploadedById], references: [id])

  @@index([entityType, entityId, uploadedAt])
  @@index([uploadedById, uploadedAt])
}

model EnhancedNotification {
  id         String                   @id @default(cuid())
  userId     String                   @map("userId")
  type       EnhancedNotificationType
  title      String
  message    String
  entityType String?                  @map("entityType")
  entityId   String?                  @map("entityId")
  metadata   Json?
  isRead     Boolean                  @default(false) @map("isRead")
  readAt     DateTime?                @map("readAt")
  createdAt  DateTime                 @default(now()) @map("createdAt")
  user       User                     @relation("UserNotifications", fields: [userId], references: [id])

  @@index([userId, isRead, createdAt])
  @@index([entityType, entityId])
  @@index([type, userId])
}

model StatusHistory {
  id          String   @id @default(cuid())
  entityType  String   @map("entityType")
  entityId    String   @map("entityId")
  fromStatus  String?  @map("fromStatus")
  toStatus    String   @map("toStatus")
  reason      String?
  changedById String   @map("changedById")
  changedAt   DateTime @default(now()) @map("changedAt")
  changedBy   User     @relation("StatusChanger", fields: [changedById], references: [id])

  @@index([entityType, entityId, changedAt])
  @@index([changedById, changedAt])
}

model TimeEntry {
  id          String   @id @default(cuid())
  taskId      String   @map("taskId")
  userId      String   @map("userId")
  projectId   String   @map("projectId")
  hours       Decimal  @db.Decimal(5, 2)
  description String?
  date        DateTime @db.Date
  billable    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")
  project     Project  @relation("ProjectTimeEntries", fields: [projectId], references: [id])
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation("TimeTracker", fields: [userId], references: [id])

  @@index([userId, date])
  @@index([projectId, date])
  @@index([taskId, userId, date])
}

model UserPresence {
  id         String   @id @default(cuid())
  userId     String   @map("userId")
  entityType String
  entityId   String
  lastSeenAt DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, entityType, entityId])
  @@index([entityType, entityId])
}

enum UserRole {
  PRINCIPAL_INVESTIGATOR
  CO_PRINCIPAL_INVESTIGATOR
  DATA_SCIENTIST
  DATA_ANALYST
  CLINICAL_RESEARCH_COORDINATOR
  REGULATORY_COORDINATOR
  STAFF_COORDINATOR
  FELLOW
  MEDICAL_STUDENT
  VOLUNTEER_RESEARCH_ASSISTANT
  RESEARCH_ASSISTANT
  LAB_ADMINISTRATOR
  EXTERNAL_COLLABORATOR
}

enum MemberRole {
  RESPONSIBLE
  ACCOUNTABLE
  CONSULTED
  INFORMED
  CONTRIBUTOR
}

enum ProjectStatus {
  PLANNING
  IRB_SUBMISSION
  IRB_APPROVED
  DATA_COLLECTION
  ANALYSIS
  MANUSCRIPT
  UNDER_REVIEW
  PUBLISHED
  ON_HOLD
  CANCELLED
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FundingSource {
  NIH
  NSF
  INDUSTRY_SPONSORED
  INTERNAL
  FOUNDATION
  OTHER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  BLOCKED
}

enum IdeaCategory {
  RESEARCH_QUESTION
  METHOD_IMPROVEMENT
  COLLABORATION
  GRANT_OPPORTUNITY
  TECHNOLOGY
  OTHER
}

enum IdeaStatus {
  ACTIVE
  UNDER_REVIEW
  APPROVED
  REJECTED
  CONVERTED
  ARCHIVED
}

enum IdeaStage {
  CONCEPT
  EVALUATION
  PLANNING
  APPROVED
  IN_PROGRESS
  COMPLETED
}

enum VoteType {
  UP
  DOWN
}

enum ResourceLevel {
  LOW
  MEDIUM
  HIGH
}

enum EmailStatus {
  SENT
  FAILED
  SCHEDULED
  DRAFT
}

enum DeadlineType {
  IRB_RENEWAL
  GRANT_SUBMISSION
  PAPER_DEADLINE
  CONFERENCE_ABSTRACT
  MILESTONE
  MEETING
  OTHER
}

enum DeadlineStatus {
  UPCOMING
  IN_PROGRESS
  COMPLETED
  OVERDUE
  CANCELLED
}

enum RecurringPattern {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum ReminderStatus {
  PENDING
  SENT
  FAILED
}

enum CustomFieldType {
  TEXT
  NUMBER
  DATE
  SELECT
  MULTI_SELECT
  CHECKBOX
  URL
  EMAIL
  PHONE
  FORMULA
  LOOKUP
  ROLLUP
}

enum ViewType {
  KANBAN
  TABLE
  TIMELINE
  CALENDAR
  GANTT
  FORM
  GALLERY
  MAP
}

enum CommentableType {
  PROJECT
  TASK
  IDEA
  STANDUP
  BUCKET
  DEADLINE
}

enum AttachableType {
  PROJECT
  TASK
  COMMENT
  IDEA
  ACTION_ITEM
  DEADLINE
}

enum EnhancedNotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  TASK_DUE_SOON
  TASK_OVERDUE
  PROJECT_STATUS_CHANGE
  COMMENT_MENTION
  COMMENT_REPLY
  DEADLINE_APPROACHING
  REVIEW_REQUESTED
  BUCKET_ASSIGNMENT
  IDEA_VOTE
  STANDUP_ACTION_ITEM
}

enum NotificationType {
  MENTION
  ASSIGNMENT
  COMMENT
  STATUS_CHANGE
  DUE_DATE_REMINDER
  DEADLINE_APPROACHING
  TASK_COMPLETED
  PROJECT_UPDATE
  SYSTEM_ALERT
}
