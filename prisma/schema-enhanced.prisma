// Enhanced Lab Management Schema - Blending Streamlined Hierarchy with Enterprise Features
// Bucket → Project → Task with position-based ordering and comprehensive features

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// CORE HIERARCHY: Bucket → Project → Task
// ==========================================

model Bucket {
  id          String   @id @default(cuid())
  labId       String   @map("lab_id")
  name        String   // Wisconsin R01, Clinical Studies, RICCC Internal
  description String?
  color       String   @default("#8B5CF6") // Purple default matching UI theme
  icon        String   @default("folder")
  position    Int      @default(0) // For kanban column ordering - KEY ENHANCEMENT
  isActive    Boolean  @default(true) @map("is_active") // Soft delete support
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  lab      Lab       @relation(fields: [labId], references: [id])
  projects Project[] // All projects in this bucket

  @@unique([labId, name]) // Prevent duplicate bucket names per lab
  @@index([labId, position]) // Optimized for kanban queries
  @@map("buckets")
}

model Project {
  id            String   @id @default(cuid())
  bucketId      String   @map("bucket_id") // MUST belong to a bucket - STRICT HIERARCHY
  parentId      String?  @map("parent_id") // For sub-projects (keeping existing feature)
  
  // Core identification
  name          String
  oraNumber     String?  @unique @map("ora_number") // Auto-generated ORA-YYYY-NNN
  
  // Project details
  status        ProjectStatus @default(PLANNING)
  projectType   String   @map("project_type") // Clinical Study, RCT, EHR Study, AI/LLM
  studyType     String?  @map("study_type") // Interventional, Observational (research-specific)
  priority      Priority @default(MEDIUM)
  fundingSource FundingSource? @map("funding_source")
  fundingDetails String? @map("funding_details")
  
  // Timeline and collaboration
  startDate     DateTime? @map("start_date") // Enhanced timeline tracking
  dueDate       DateTime? @map("due_date")
  completedDate DateTime? @map("completed_date")
  externalCollaborators String? @db.Text @map("external_collaborators")
  notes         String?  @db.Text
  
  // File management (simplified approach)
  protocolLink  String?  @map("protocol_link")
  dataLink      String?  @map("data_link")
  
  // Kanban and organization
  position      Int      @default(0) // Position within bucket - KEY ENHANCEMENT
  progress      Int      @default(0) // 0-100 percentage
  isActive      Boolean  @default(true) @map("is_active") // Soft delete
  
  // Audit fields
  createdById   String   @map("created_by_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  bucket        Bucket   @relation(fields: [bucketId], references: [id])
  parent        Project? @relation("ProjectHierarchy", fields: [parentId], references: [id])
  children      Project[] @relation("ProjectHierarchy")
  createdBy     User     @relation("ProjectCreator", fields: [createdById], references: [id])
  members       ProjectMember[] // RACI-based team members
  tasks         Task[]   // All tasks for this project
  ideas         Idea[]   // Keep idea conversion feature

  @@index([bucketId, position]) // Optimized for kanban drag-and-drop
  @@index([status, dueDate]) // Optimized for dashboard queries
  @@index([oraNumber]) // Fast ORA number lookups
  @@map("projects")
}

model Task {
  id            String   @id @default(cuid())
  projectId     String   @map("project_id") // MUST belong to a project - STRICT HIERARCHY
  parentTaskId  String?  @map("parent_task_id") // For subtasks
  
  // Task content
  title         String
  description   String?  @db.Text
  status        TaskStatus @default(TODO)
  priority      Priority @default(MEDIUM)
  
  // Timeline
  dueDate       DateTime? @map("due_date")
  startDate     DateTime? @map("start_date")
  completedAt   DateTime? @map("completed_at")
  
  // Capacity planning (enhanced feature)
  estimatedHours Float?  @map("estimated_hours")
  actualHours   Float?   @map("actual_hours")
  
  // Organization
  position      Int      @default(0) // Order within project/parent task
  tags          String[] // Flexible tagging
  isActive      Boolean  @default(true) @map("is_active") // Soft delete
  
  // Completion tracking
  completedById String?  @map("completed_by_id")
  
  // Audit fields
  createdById   String   @map("created_by_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parentTask    Task?    @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  subtasks      Task[]   @relation("TaskHierarchy")
  createdBy     User     @relation("TaskCreator", fields: [createdById], references: [id])
  completedBy   User?    @relation("TaskCompleter", fields: [completedById], references: [id])
  assignees     TaskAssignment[] // Multiple assignees support
  dependencies  TaskDependency[] @relation("DependentTask") // Enhanced feature
  dependents    TaskDependency[] @relation("DependsOnTask")

  @@index([projectId, position]) // Optimized for task ordering
  @@index([parentTaskId, position]) // Optimized for subtask ordering  
  @@index([status, dueDate]) // Optimized for dashboard queries
  @@map("tasks")
}

// ==========================================
// TEAM MANAGEMENT: Enhanced RACI Model
// ==========================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String   // Full name (computed from firstName + lastName)
  firstName String   // Enhanced for better name management
  lastName  String   // Enhanced for better name management
  role      UserRole @default(RESEARCH_MEMBER)
  avatar    String?  // Avatar color from palette
  initials  String   // Auto-generated from firstName + lastName
  capacity  Int      @default(40) // Hours per week capacity - ENHANCED FEATURE
  expertise String[] // Array of expertise areas - ENHANCED FEATURE
  isActive  Boolean  @default(true) @map("is_active") // Soft delete
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  labs             LabMember[]
  createdProjects  Project[]     @relation("ProjectCreator")
  projectMembers   ProjectMember[]
  createdTasks     Task[]        @relation("TaskCreator")
  completedTasks   Task[]        @relation("TaskCompleter")
  taskAssignments  TaskAssignment[]
  createdIdeas     Idea[]
  ideaVotes        IdeaVote[]
  standupParticipants StandupParticipant[]
  actionItems      ActionItem[]

  @@map("users")
}

model ProjectMember {
  id         String     @id @default(cuid())
  projectId  String     @map("project_id")
  userId     String     @map("user_id")
  role       MemberRole @default(CONTRIBUTOR) // RACI-like roles - ENHANCED FEATURE
  allocation Int        @default(20) // Percentage allocation - ENHANCED FEATURE
  joinedAt   DateTime   @default(now()) @map("joined_at")
  isActive   Boolean    @default(true) @map("is_active") // Soft delete

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
  @@index([userId, role]) // Optimized for user role queries
  @@map("project_members")
}

model TaskAssignment {
  id         String   @id @default(cuid())
  taskId     String   @map("task_id")
  userId     String   @map("user_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  isActive   Boolean  @default(true) @map("is_active") // Soft delete

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
  @@map("task_assignments")
}

// Task dependency model for project management - ENHANCED FEATURE
model TaskDependency {
  id              String @id @default(cuid())
  dependentTaskId String @map("dependent_task_id")
  dependsOnTaskId String @map("depends_on_task_id")
  
  dependentTask Task @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  dependsOnTask Task @relation("DependsOnTask", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)
  
  @@unique([dependentTaskId, dependsOnTaskId])
  @@index([dependsOnTaskId])
  @@map("task_dependencies")
}

// ==========================================
// SUPPORTING MODELS
// ==========================================

model Lab {
  id          String   @id @default(cuid())
  name        String
  shortName   String   @unique
  description String?
  logo        String?
  isActive    Boolean  @default(true) @map("is_active") // Soft delete
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  members  LabMember[]
  buckets  Bucket[]
  ideas    Idea[]
  standups Standup[]

  @@map("labs")
}

model LabMember {
  id       String  @id @default(cuid())
  userId   String  @map("user_id")
  labId    String  @map("lab_id")
  isAdmin  Boolean @default(false) @map("is_admin")
  isActive Boolean @default(true) @map("is_active") // Soft delete
  joinedAt DateTime @default(now()) @map("joined_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lab  Lab  @relation(fields: [labId], references: [id], onDelete: Cascade)

  @@unique([userId, labId])
  @@map("lab_members")
}

// Research ideation - keeping existing features
model Idea {
  id               String     @id @default(cuid())
  title            String
  description      String     @db.Text
  status           IdeaStatus @default(DRAFT)
  feasibilityScore Float?     @map("feasibility_score")
  impactScore      Float?     @map("impact_score")
  isActive         Boolean    @default(true) @map("is_active") // Soft delete
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")

  // Relations
  labId               String    @map("lab_id")
  lab                 Lab       @relation(fields: [labId], references: [id], onDelete: Cascade)
  createdById         String    @map("created_by_id")
  createdBy           User      @relation(fields: [createdById], references: [id])
  votes               IdeaVote[]
  convertedToProjectId String?  @unique @map("converted_to_project_id")
  convertedToProject   Project? @relation(fields: [convertedToProjectId], references: [id], onDelete: SetNull)

  @@map("ideas")
}

model IdeaVote {
  id      String   @id @default(cuid())
  ideaId  String   @map("idea_id")
  userId  String   @map("user_id")
  votedAt DateTime @default(now()) @map("voted_at")

  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([ideaId, userId])
  @@map("idea_votes")
}

// AI-powered meeting capture - keeping existing features
model Standup {
  id         String   @id @default(cuid())
  date       DateTime
  audioUrl   String?  @map("audio_url")
  transcript String?  @db.Text
  isActive   Boolean  @default(true) @map("is_active") // Soft delete
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  labId        String                @map("lab_id")
  lab          Lab                   @relation(fields: [labId], references: [id], onDelete: Cascade)
  participants StandupParticipant[]
  actionItems  ActionItem[]
  blockers     Blocker[]
  decisions    Decision[]

  @@map("standups")
}

model StandupParticipant {
  id        String @id @default(cuid())
  standupId String @map("standup_id")
  userId    String @map("user_id")

  standup Standup @relation(fields: [standupId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([standupId, userId])
  @@map("standup_participants")
}

model ActionItem {
  id          String    @id @default(cuid())
  description String    @db.Text
  completed   Boolean   @default(false)
  dueDate     DateTime? @map("due_date")
  isActive    Boolean   @default(true) @map("is_active") // Soft delete
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  standupId  String  @map("standup_id")
  standup    Standup @relation(fields: [standupId], references: [id], onDelete: Cascade)
  assigneeId String? @map("assignee_id")
  assignee   User?   @relation(fields: [assigneeId], references: [id], onDelete: SetNull)

  @@map("action_items")
}

model Blocker {
  id          String  @id @default(cuid())
  description String  @db.Text
  resolved    Boolean @default(false)
  isActive    Boolean @default(true) @map("is_active") // Soft delete

  // Relations
  standupId String  @map("standup_id")
  standup   Standup @relation(fields: [standupId], references: [id], onDelete: Cascade)

  @@map("blockers")
}

model Decision {
  id          String  @id @default(cuid())
  description String  @db.Text
  isActive    Boolean @default(true) @map("is_active") // Soft delete

  // Relations
  standupId String  @map("standup_id")
  standup   Standup @relation(fields: [standupId], references: [id], onDelete: Cascade)

  @@map("decisions")
}

// Activity log for comprehensive audit trail - ENHANCED FEATURE
model ActivityLog {
  id         String   @id @default(cuid())
  userId     String   @map("user_id") // Who performed the action
  labId      String?  @map("lab_id") // Lab context
  entityType String   @map("entity_type") // Type of entity (project, task, user, etc.)
  entityId   String   @map("entity_id") // ID of the entity
  action     String   // Action performed (created, updated, deleted, etc.)
  metadata   Json?    // Additional context data
  createdAt  DateTime @default(now()) @map("created_at")
  
  @@index([userId, createdAt])
  @@index([entityType, entityId])
  @@index([labId, createdAt])
  @@map("activity_logs")
}

// ==========================================
// ENUMS
// ==========================================

enum UserRole {
  PRINCIPAL_INVESTIGATOR
  CO_PRINCIPAL_INVESTIGATOR
  RESEARCH_MEMBER
  LAB_ADMINISTRATOR
  EXTERNAL_COLLABORATOR
}

enum ProjectStatus {
  PLANNING
  IRB_SUBMISSION
  IRB_APPROVED
  DATA_COLLECTION
  ANALYSIS
  MANUSCRIPT
  UNDER_REVIEW
  PUBLISHED
  ON_HOLD
  CANCELLED
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FundingSource {
  NIH
  NSF
  INDUSTRY_SPONSORED
  INTERNAL
  FOUNDATION
  OTHER
}

enum MemberRole {
  RESPONSIBLE  // R - Does the work
  ACCOUNTABLE  // A - Ultimately answerable
  CONSULTED    // C - Two-way communication
  INFORMED     // I - One-way communication
  CONTRIBUTOR  // Additional: General contributor
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  BLOCKED
}

enum IdeaStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  REJECTED
  CONVERTED
}